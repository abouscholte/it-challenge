{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isHTMLElement.ts","../../src/constants.ts","../../src/logic/attachEventListeners.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/utils/isKey.ts","../../src/utils/compact.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/transformToNestObject.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/logic/focusOnErrorField.ts","../../src/logic/removeAllEventListeners.ts","../../src/logic/getRadioValue.ts","../../src/utils/isRadioInput.ts","../../src/utils/isFileInput.ts","../../src/utils/isCheckBoxInput.ts","../../src/utils/isMultipleSelect.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/utils/isDetached.ts","../../src/utils/isEmptyObject.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/findRemovedFieldAndRemoveListener.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepMerge.ts","../../src/utils/deepEqual.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/isString.ts","../../src/logic/getFieldsValues.ts","../../src/logic/isErrorStateChanged.ts","../../src/utils/isRegex.ts","../../src/logic/getValueAndMessage.ts","../../src/utils/isFunction.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/appendErrors.ts","../../src/logic/validateField.ts","../../src/utils/getPath.ts","../../src/logic/assignWatchFields.ts","../../src/logic/skipValidation.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/isSelectInput.ts","../../src/utils/onDomRemove.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/validationModeChecker.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/useForm.ts","../../src/useFormContext.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","_arrayLikeToArray","len","arr2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","_createForOfIteratorHelper","allowArrayLike","it","F","s","e","f","normalCompletion","didErr","step","_e2","_toConsumableArray","arrayLikeToArray","iter","HTMLElement","EVENTS","VALIDATION_MODE","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","isHTMLElement","addEventListener","isObjectType","isNullOrUndefined","Date","filter","Boolean","input","compact","replace","split","set","object","path","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","isNaN","data","val","obj","defaultValue","result","reduce","isUndefined","fields","fieldErrors","field","focus","options","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","previous","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","shallowFieldsStateRef","excludeDisabled","shouldKeepRawValue","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","NaN","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","isCheckBoxInput","forEach","removeAllEventListeners","deepMerge","target","source","isPrimitive","targetValue","sourceValue","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","search","output","isString","startsWith","find","transformToNestObject","errors","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","message","getValidateError","validateAllFieldCriteria","types","a","required","maxLength","minLength","min","max","pattern","validate","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","copy","isWeb","File","getTime","Set","Map","get","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","all","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setValue","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","updateWatchedValue","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","assignWatchFields","combinedDefaultValues","watch","unregister","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","isSelectInput","register","refOrRegisterOptions","handleSubmit","onValid","onInvalid","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","prop","control","React.useMemo","FormContext","React.createContext","displayName"],"mappings":"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","file":"static/js/0.d5c7bb27.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n  shouldKeepRawValue?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return shouldKeepRawValue\n      ? value\n      : valueAsNumber\n      ? value === ''\n        ? NaN\n        : +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\nimport deepEqual from '../utils/deepEqual';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(\n      fieldsRef,\n      name,\n      shallowFieldsStateRef,\n      false,\n      true,\n    );\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        const parentNodeName = getNodeParentName(fieldNames) || fieldNames;\n\n        if (fieldArrayNamesRef.current.has(parentNodeName)) {\n          fieldValues = {\n            ...fieldArrayValuesRef.current,\n            ...fieldValues,\n          };\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (shouldUnregister && !(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"sourceRoot":""}